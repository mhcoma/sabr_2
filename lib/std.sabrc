$call { #dup #len 1 #swap #substr } #macro ( id -- ? )

$true -1 #macro ( -- b )
$false 0 #macro ( -- b)
$null 0 #macro ( -- addr )
$not { 0 = } #macro ( x -- b )
$buf { 0 != } #macro ( x -- b )
$and { buf swap buf & } #macro ( x1 x2 -- b )
$or { buf swap buf | } #macro ( x1 x2 -- b )
$select { if drop else nip end } #macro ( x1 x2 b -- x )

$~set { #dup call ~ swap set } #macro ( id -- )
$++set { #dup call ++ swap set } #macro ( id -- )
$--set { #dup call -- swap set } #macro ( id -- )

$+set { #dup call rot + swap set } #macro ( n id -- )
$-set { #dup call rot - swap set } #macro ( n id -- )
$*set { #dup call rot * swap set } #macro ( n id -- )
$/set { #dup call rot / swap set } #macro ( n id -- )
$%set { #dup call rot % swap set } #macro ( n id -- )
$f+set { #dup call rot f+ swap set } #macro ( f id -- )
$f-set { #dup call rot f- swap set } #macro ( f id -- )
$f*set { #dup call rot f* swap set } #macro ( f id -- )
$f/set { #dup call rot f/ swap set } #macro ( f id -- )
$f%set { #dup call rot f% swap set } #macro ( f id -- )
$<<set { #dup call rot << swap set } #macro ( x id -- )
$>>set { #dup call rot >> swap set } #macro ( x id -- )
$&set { #dup call rot & swap set } #macro ( x id -- )
$|set { #dup call rot | swap set } #macro ( x id -- )
$^set { #dup call rot ^ swap set } #macro ( x id -- )

$++store { dup fetch ++ swap store } #macro ( addr -- )
$--store { dup fetch -- swap store } #macro ( addr -- )
$~store { dup fetch ~ swap store } #macro ( addr -- )

$+store { dup fetch rot + swap store } #macro ( n addr -- )
$-store { dup fetch rot - swap store } #macro ( n addr -- )
$*store { dup fetch rot * swap store } #macro ( n addr -- )
$/store { dup fetch rot / swap store } #macro ( n addr -- )
$%store { dup fetch rot % swap store } #macro ( n addr -- )
$f+store { dup fetch rot f+ swap store } #macro ( f addr -- )
$f-store { dup fetch rot f- swap store } #macro ( f addr -- )
$f*store { dup fetch rot f* swap store } #macro ( f addr -- )
$f/store { dup fetch rot f/ swap store } #macro ( f addr -- )
$f%store { dup fetch rot f% swap store } #macro ( f addr -- )
$<<store { dup fetch rot << swap store } #macro ( x addr -- )
$>>store { dup fetch rot >> swap store } #macro ( x addr -- )
$&store { dup fetch rot & swap store } #macro ( x addr -- )
$|store { dup fetch rot | swap store } #macro ( x addr -- )
$^store { dup fetch rot ^ swap store } #macro ( x addr -- )

$cr { '\n' putc } #macro ( -- )
$space { ' ' putc } #macro ( -- )
$putsln { puts cr } #macro ( addr -- )

$cells { 8 * } #macro ( u -- u )
$at { swap 8 * + } #macro ( u addr -- addr )
$alloc~? { alloc dup not if } #macro ( u -- addr )

$method {
	func $this set
} #macro ( id -- | func ... )